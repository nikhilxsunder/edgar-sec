name: Build, Publish and Sign Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version to release (e.g., 1.2.3)"
        required: false
        type: string
      publish_to_pypi:
        description: "Publish to PyPI"
        required: false
        default: false
        type: boolean
      publish_to_anaconda:
        description: "Publish to Anaconda"
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Sync conda recipe
        run: |
          pip install tomli
          python scripts/sync_conda_recipe.py

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Store conda recipe
        uses: actions/upload-artifact@v4
        with:
          name: conda-recipe
          path: conda-recipe/

  publish-to-pypi:
    name: >-
      Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.1

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
          poetry publish --no-interaction

  publish-to-anaconda:
    name: >-
      Publish Python distribution to Anaconda
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_anaconda == 'true')
    needs:
      - build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Download conda recipe
        uses: actions/download-artifact@v4
        with:
          name: conda-recipe
          path: conda-recipe/

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.9"
          channels: conda-forge,defaults

      - name: Install conda-build and anaconda-client
        shell: bash -el {0}
        run: |
          conda install -y conda-build anaconda-client conda-verify

      - name: Build conda package
        shell: bash -el {0}
        run: |
          # Update the source URL in meta.yaml to use the local tarball
          VERSION=$(ls dist/edgar_sec-*.tar.gz | grep -oP 'edgar_sec-\K[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          TARBALL_PATH=$(realpath dist/edgar_sec-${VERSION}.tar.gz)

          # Calculate SHA256 of the tarball
          SHA256=$(sha256sum $TARBALL_PATH | cut -d ' ' -f 1)

          # Update meta.yaml with the correct info
          sed -i "s/version:.*/version: $VERSION/" conda-recipe/meta.yaml
          sed -i "s|url:.*|url: \"file://$TARBALL_PATH\"|" conda-recipe/meta.yaml
          sed -i "s/sha256:.*/sha256: \"$SHA256\"/" conda-recipe/meta.yaml

          # Build the conda package
          conda build conda-recipe/

      - name: Publish to Anaconda
        shell: bash -el {0}
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        run: |
          # Get the built package path
          CONDA_PACKAGE=$(conda build conda-recipe/ --output)

          # Sign the package with Anaconda
          anaconda upload --user nikhil.sunder --force $CONDA_PACKAGE
  update-feedstock:
    name: Update Conda-Forge Feedstock
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Download Python package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Download Conda recipe
        uses: actions/download-artifact@v4
        with:
          name: conda-recipe
          path: conda-recipe/

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.9"
          channels: conda-forge,defaults

      - name: Install conda-smithy and required tools
        run: |
          conda install -y conda-smithy conda-build anaconda-client ruamel.yaml gitpython

      - name: Clone edgar-sec-feedstock repository
        env:
          FEEDSTOCK_REPO: "https://github.com/nikhilxsunder/edgar-sec-feedstock.git"
        run: |
          git clone $FEEDSTOCK_REPO feedstock

      - name: Patch feedstock with version and sha256
        shell: bash -el {0}
        run: |
          VERSION=$(ls dist/edgar_sec-*.tar.gz | grep -oP 'edgar_sec-\K[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          TARBALL_PATH=$(realpath dist/edgar_sec-${VERSION}.tar.gz)
          SHA256=$(sha256sum $TARBALL_PATH | cut -d ' ' -f 1)

          sed -i "s/version:.*/version: $VERSION/" conda-recipe/meta.yaml
          sed -i "s|url:.*|url: \"https://pypi.io/packages/source/e/edgar-sec/edgar-sec-${VERSION}.tar.gz\"|" conda-recipe/meta.yaml
          sed -i "s/sha256:.*/sha256: \"$SHA256\"/" conda-recipe/meta.yaml

          cp conda-recipe/meta.yaml feedstock/recipe/meta.yaml

      - name: Re-render feedstock using conda-smithy
        run: |
          cd feedstock
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          conda smithy rerender -c auto

      - name: Commit and push changes to branch
        run: |
          cd feedstock
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b update-${{ github.event.inputs.release_version || github.ref_name }}
          git add .
          git commit -m "Update to version ${{ github.event.inputs.release_version || github.ref_name }}"
          git remote set-url origin https://nikhilxsunder:${{ secrets.FEEDSTOCK_TOKEN }}@github.com/nikhilxsunder/edgar-sec-feedstock.git
          git push origin HEAD:update-${{ github.event.inputs.release_version || github.ref_name }}

      - name: Checkout main repository branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Create Pull Request on feedstock
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.FEEDSTOCK_TOKEN }}
          commit-message: "Update to version ${{ github.event.inputs.release_version || github.ref_name }}"
          branch: update-${{ github.event.inputs.release_version || github.ref_name }}
          base: main
          title: "Update to version ${{ github.event.inputs.release_version || github.ref_name }}"
          body: |
            This PR updates the `edgar-sec-feedstock` to version ${{ github.event.inputs.release_version || github.ref_name }}.
            The `meta.yaml` file has been patched with the correct version and SHA256 hash.

  sign-and-release:
    name: >-
      Sign and publish GitHub Release
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.publish_to_pypi == 'true' || github.event.inputs.publish_to_anaconda == 'true'))
    needs:
      - publish-to-pypi
      - publish-to-anaconda
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: GPG sign packages
        run: |
          echo "GPG signing distribution packages..."
          for file in dist/*.tar.gz dist/*.whl; do
            if [ -f "$file" ]; then
              echo "Signing $file"
              gpg --detach-sign --armor "$file"
            fi
          done
          # List all files for debugging
          ls -la dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_version || github.ref_name }}
          name: Release ${{ github.event.inputs.release_version || github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/*.tar.gz
            dist/*.whl
            dist/*.asc
            dist/*.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify GPG signatures
        run: |
          echo "Verifying GPG signatures..."
          for asc in dist/*.asc; do
            base_file="${asc%.asc}"
            if [ -f "$base_file" ]; then
              echo "Verifying signature for $base_file"
              gpg --verify "$asc" "$base_file"
            fi
          done
